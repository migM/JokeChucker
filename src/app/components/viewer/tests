import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { of, throwError } from 'rxjs';
import { ViewerComponent } from './viewer.component';
import { RouterTestingModule } from '@angular/router/testing';

describe('ViewerComponent', () => {
let component: ViewerComponent;
let fixture: ComponentFixture<ViewerComponent>;
let httpClientSpy: { get: jasmine.Spy };
let matDialogSpy: { open: jasmine.Spy };
let matSnackBarSpy: { open: jasmine.Spy };

beforeEach(() => {
httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);
matDialogSpy = jasmine.createSpyObj('MatDialog', ['open']);
matSnackBarSpy = jasmine.createSpyObj('MatSnackBar', ['open']);

TestBed.configureTestingModule({
declarations: [ViewerComponent],
imports: [HttpClientTestingModule, RouterTestingModule],
providers: [
{ provide: MatDialog, useValue: matDialogSpy },
{ provide: MatSnackBar, useValue: matSnackBarSpy },
],
});

fixture = TestBed.createComponent(ViewerComponent);
component = fixture.componentInstance;
});

it('should create the component', () => {
expect(component).toBeTruthy();
});

it('should call checkForSensitiveContent method and update flags - option death', () => {
const jokeValue = 'This is a death joke';
component.checkForSensitiveContent(jokeValue);

expect(component.deathJoke).toBeTrue();
expect(component.isSensitive).toBeFalse();
expect(component.chuckKicked).toBeFalse();
});

it('should call checkForSensitiveContent method and update flags - option sensitive', () => {
const jokeValue = 'This is a fuck joke';
component.checkForSensitiveContent(jokeValue);

expect(component.deathJoke).toBeFalse();
expect(component.isSensitive).toBeTruthy();
expect(component.chuckKicked).toBeFalse();
});

it('should call checkForSensitiveContent method and update flags - option sensitive', () => {
const jokeValue = 'This is a kick joke';
component.checkForSensitiveContent(jokeValue);

expect(component.deathJoke).toBeFalse();
expect(component.isSensitive).toBeFalse();
expect(component.chuckKicked).toBeTrue();
});

it('should call checkForSensitiveContent method and update flags - not specific case', () => {
const jokeValue = 'This is a random joke';
component.checkForSensitiveContent(jokeValue);
expect(component.deathJoke).toBeFalse();
expect(component.isSensitive).toBeFalse();
expect(component.chuckKicked).toBeFalse();
});

it('should call getJoke method - error', () => {
const spyGet = spyOn(component['http'], 'get').and.returnValue(throwError(() => new Error('error')))
const spyCheckSensitiveContent = spyOn(component, 'checkForSensitiveContent').and.stub();
const timesChuckedBefore = component.timesChucked;

component.getJoke();
expect(component.timesChucked).toEqual(timesChuckedBefore)
expect(spyGet).toHaveBeenCalled();
expect(spyCheckSensitiveContent).not.toHaveBeenCalled();
});

it('should call getJoke method - success', fakeAsync(()=> {
const spyGet = spyOn(component['http'], 'get').and.returnValue(of({value: 'my joke'}))
const spyCheckSensitiveContent = spyOn(component, 'checkForSensitiveContent').and.stub();

component.getJoke();
tick();

expect(spyGet).toHaveBeenCalled();
expect(spyCheckSensitiveContent).toHaveBeenCalledWith('my joke');
expect(component.jokeValue).toEqual('my joke');

}));
});
 
